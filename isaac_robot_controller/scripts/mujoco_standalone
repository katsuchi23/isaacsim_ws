import mujoco
import mujoco.viewer
import numpy as np
import time

# --- Parameters ---
SCENE_PATH = "/home/rey/isaacsim_ws/src/mujoco_menagerie/low_cost_robot_arm/scene.xml"
DT = 0.002  # simulation timestep
DURATION = 5.0  # total duration seconds
NUM_STEPS = int(DURATION / DT)

# PD gains for feedback control
Kp = 50.0
Kd = 2.0

# Desired start and end joint positions for the trajectory
q_start = np.zeros(6)
q_end = np.array([-0.82884523, -0.37348598,  0.79513368,  0.74999428,  0.44999657, -1.56861548])

# --- Setup MuJoCo ---
model = mujoco.MjModel.from_xml_path(SCENE_PATH)
data = mujoco.MjData(model)
viewer = mujoco.viewer.launch_passive(model, data)  # passive mode

# --- Generate smooth trajectory ---
trajectory = np.linspace(q_start, q_end, NUM_STEPS)

# Initialize previous states for numerical differentiation
prev_q = trajectory[0]
prev_v = np.zeros(model.nv)

# Run the simulation loop
for i in range(NUM_STEPS):
    # Desired joint position at this timestep
    q_des = trajectory[i]

    # Numerical differentiation for velocity and acceleration
    if i == 0:
        v_des = np.zeros(model.nv)
        a_des = np.zeros(model.nv)
    else:
        v_des = (q_des - prev_q) / DT
        a_des = (v_des - prev_v) / DT

    # Set desired position, velocity, acceleration to MuJoCo data
    data.qpos[:len(q_des)] = q_des
    data.qvel[:] = v_des
    data.qacc[:] = a_des

    # Compute inverse dynamics torque (feedforward)
    mujoco.mj_inverse(model, data)
    tau_ff = data.qfrc_inverse[:len(q_des)].copy()

    # Compute PD feedback torque
    q_err = q_des - data.qpos[:len(q_des)]
    v_err = v_des - data.qvel[:len(q_des)]
    tau_fb = Kp * q_err + Kd * v_err

    # Total torque command
    tau_cmd = tau_ff + tau_fb

    # Apply torque
    data.ctrl[:len(tau_cmd)] = tau_cmd

    # Step simulation and update viewer
    mujoco.mj_step(model, data)
    viewer.sync()

    prev_q = q_des.copy()
    prev_v = v_des.copy()

    time.sleep(DT)

print("Trajectory completed, keeping viewer open. Close window to exit.")

# Keep the viewer open until user closes manually
while viewer.is_running():
    viewer.sync()
    time.sleep(0.01)

viewer.close()
